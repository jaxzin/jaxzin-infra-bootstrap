---
- name: Create data directories for Gitea
  # Prepare persistent directories for both Gitea and MySQL
  file:
    path: "{{ gitea_data_path }}/{{ item }}"
    state: directory
    owner: "1000"
    group: "1000"
    mode: '0755'
  loop:
    - gitea
    - conf
    - conf/secrets
    - tmp

# These permissions aren't required for a new installation, but are required for restoring from a
# backup because the restore process runs as the 'mysql' process inside the container while a new
# installation creates the database with the 'root' user on first execution
- name: Create data directory for MySQL with correct permissions
  file:
    path: "{{ gitea_data_path }}/db"
    state: directory
    owner: "999"  # UID for the mysql user in the official container
    group: "999"  # GID for the mysql user in the official container
    mode: '0755'
  tags: directories

- name: Create Gitea Docker network
  community.docker.docker_network:
    name: "{{ gitea_network_name }}"
    state: present

- name: Deploy MySQL container for Gitea
  # Launch a MySQL container for the Gitea database
  community.docker.docker_container:
    name: gitea-db
    image: "{{ gitea_db_image }}"
    state: started
    restart_policy: always
    networks:
      - name: "{{ gitea_network_name }}"
    env:
      MYSQL_ROOT_PASSWORD: "{{ gitea_db_password }}"
      MYSQL_DATABASE: "{{ gitea_db_name }}"
      MYSQL_USER: "{{ gitea_db_user }}"
      MYSQL_PASSWORD: "{{ gitea_db_password }}"
    volumes:
      - "{{ gitea_data_path }}/db:/var/lib/mysql"
    command: "--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"
  tags: db

- name: Check if internal token file exists
  stat:
    path: "{{ gitea_internal_token_path }}"
  register: internal_token_file

- name: Ensure Gitea internal token file exists
  copy:
    dest: "{{ gitea_internal_token_path }}"
    content: "{{ gitea_internal_token }}"
    owner: "1000"
    group: "1000"
    mode: '0600'
    force: no  # only write if different
  when: not internal_token_file.stat.exists
  notify: Restart Gitea

- name: Check if app.ini exists
  stat:
    path: "{{ gitea_app_ini_path_host }}"
  register: gitea_app_ini_stat
  check_mode: no

- name: Get the existing JWT_SECRET
  when: gitea_app_ini_stat.stat.exists
  block:
    - name: Extract JWT_SECRET directly from the remote app.ini
      ansible.builtin.command:
        cmd: "awk -F' *= *' '/^JWT_SECRET/ {print $2}' {{ gitea_app_ini_path_host }}"
      register: gitea_jwt_secret_raw
      changed_when: false
      failed_when: false  # In case JWT_SECRET doesn't exist yet
      check_mode: no

    - name: Set fact for the JWT secret, handling if it's not found
      ansible.builtin.set_fact:
        gitea_jwt_secret: "{{ gitea_jwt_secret_raw.stdout | trim | default(omit) }}"
      when: gitea_jwt_secret_raw is defined
      check_mode: no

- name: Configure Gitea app.ini
  template:
    src: app.ini.j2
    dest: "{{ gitea_app_ini_path_host }}"
    owner: "1000"
    group: "1000"
    mode: '0600'
  notify: Restart Gitea

- name: Deploy Gitea container
  # Launch the Gitea application container
  community.docker.docker_container:
    name: gitea
    image: "{{ gitea_image }}"
    state: started
    restart_policy: always
    networks:
      - name: "{{ gitea_network_name }}"
    env:
      USER_UID: "1000"
      USER_GID: "1000"
    ports:
      - "{{ gitea_port }}:{{ gitea_port_container }}"
      - "{{ gitea_ssh_port }}:22"
    volumes:
      - "{{ gitea_data_path }}/gitea:/var/lib/gitea"
      - "{{ gitea_app_ini_path_host }}:{{ gitea_app_ini_path_container }}"
      - "{{ gitea_data_path }}/conf/secrets:/etc/gitea/secrets:ro"
      - "{{ certbot_data_path }}/certs:/etc/letsencrypt:ro"
  tags: gitea
  notify: Restart Gitea

- name: Wait for MySQL to be ready (from within Gitea container)
  community.docker.docker_container_exec:
    container: gitea
    command: nc -z gitea-db 3306
  register: db_check_result
  until: db_check_result.rc is defined and db_check_result.rc == 0
  retries: 15          # Try 15 times
  delay: 5             # Wait 5 seconds between retries (total wait time: 75s)
  changed_when: false  # This task just checks status, it doesn't make a change
  when: not ansible_check_mode

- block:
  - name: Check if Gitea admin user exists
    community.docker.docker_container_exec:
      container: gitea
      command: >
        /bin/sh -c "
        /app/gitea/gitea admin user list
        --config {{ gitea_app_ini_path_container }} | grep -q '{{ gitea_admin_username }}'
        "
    register: admin_check
    failed_when: admin_check.rc not in [0, 1] # Only fail on unexpected return codes
    changed_when: false # This task is just a check, not a change

  - debug:
      msg: "Admin user '{{ gitea_admin_username }}' already exists: {{ admin_check.rc == 0 }}"
      verbosity: 1

  - name: Create Gitea admin user inside the container
    community.docker.docker_container_exec:
      container: gitea
      command: >
        /app/gitea/gitea admin user create
        --config {{ gitea_app_ini_path_container }}
        --username '{{ gitea_admin_username }}'
        --password '{{ gitea_admin_password }}'
        --email '{{ gitea_admin_email }}'
        --admin
    when: admin_check.rc != 0
    register: admin_create
    changed_when: admin_create.rc == 0
  when: not ansible_check_mode

- name: Check if Gitea API token is already persisted
  stat:
    path: "{{ gitea_data_path }}/conf/api_token.txt"
  register: api_token_file

- name: Load Gitea API token from remote file if it exists
  block:
    - name: Read Gitea API token from remote file
      command: "cat {{ gitea_data_path }}/conf/api_token.txt"
      register: api_token_content
      changed_when: false

    - name: Set Gitea API token fact
      set_fact:
        gitea_api_token: "{{ api_token_content.stdout | trim }}"
  when: api_token_file.stat.exists

- name: Wait for Gitea to be ready (from within Gitea container)
  community.docker.docker_container_exec:
    container: gitea
    command: nc -z gitea 3000
  register: web_check_result
  until: web_check_result.rc is defined and web_check_result.rc == 0
  retries: 15          # Try 15 times
  delay: 5             # Wait 5 seconds between retries (total wait time: 75s)
  changed_when: false  # This task just checks status, it doesn't make a change
  when: not ansible_check_mode

- name: Generate and persist Gitea API token if it does not exist
  when: not api_token_file.stat.exists
  block:
    - name: Create Gitea API token via API
      ansible.builtin.uri:
        url: "{{ gitea_protocol }}://{{ gitea_domain }}:{{ gitea_port }}/api/v1/users/{{ gitea_admin_username }}/tokens"
        method: POST
        user: "{{ gitea_admin_username }}"
        password: "{{ gitea_admin_password }}"
        force_basic_auth: yes
        validate_certs: no
        body_format: json
        body:
          name: "ansible-bootstrap-token"
          scopes: ["read:admin", "write:admin"]
        status_code:
          - 200
          - 201
      register: new_token_result

    - name: Set API token fact from new token
      set_fact:
        gitea_api_token: "{{ new_token_result.json.sha1 }}"

    - name: Persist the new API token to the filesystem
      copy:
        content: "{{ gitea_api_token }}"
        dest: "{{ gitea_data_path }}/conf/api_token.txt"
        owner: "1000"
        group: "1000"
        mode: '0600'