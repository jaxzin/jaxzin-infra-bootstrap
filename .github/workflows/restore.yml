# .github/workflows/restore.yml
name: Restore Gitea Data

on:
  workflow_dispatch:

jobs:
  execute-restore:
    name: Restore Gitea from Backup
    runs-on: self-hosted
    environment: production-restore # This provides a manual approval gate
    env:
      B2_BUCKET_NAME: ${{ vars.B2_BUCKET_NAME }}
      B2_APPLICATION_KEY_ID: ${{ vars.B2_APPLICATION_KEY_ID }}
      B2_APPLICATION_KEY: ${{ secrets.B2_APPLICATION_KEY }}
      GITEA_DB_PASSWORD: ${{ secrets.GITEA_DB_PASSWORD }}
      NAS_HOST: ${{ vars.NAS_HOST }}
      NAS_SSH_USER: ${{ vars.NAS_SSH_USER }}
      NAS_SSH_PASSWORD: ${{ secrets.NAS_SSH_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ansible
        run: |
          if ! (command -v ansible-playbook &> /dev/null);
          then
            echo "Ansible not found, installing..."
            python3 -m venv .venv
            source .venv/bin/activate
            pip install ansible
            echo "$(pwd)/.venv/bin" >> $GITHUB_PATH
          fi

      - name: Run Restore Playbook
        uses: dawidd6/action-ansible-playbook@v4
        with:
          playbook: gitea-restore.yml
          directory: ./playbooks
          configuration: |
            [ssh_connection]
            pipelining = True
            ssh_args = -o ControlMaster=auto -o ControlPersist=60s -o ControlPath=/tmp/ansible-ssh-%%h-%%p-%%r
          key: ${{ secrets.SSH_KEY }}
          inventory: |
            [nas]
            ${{ vars.NAS_HOST }} ansible_user="${{ vars.NAS_SSH_USER }}" ansible_become_password="${{ secrets.NAS_SSH_PASSWORD }}"
          requirements: galaxy-requirements.yml