# .github/workflows/bootstrap.yml
name: Bootstrap & Disaster-Recovery

on:
  workflow_dispatch:
    inputs:
      recover:
        description: 'Set to true to perform a destructive restore'
        required: true
        default: false
        type: boolean

jobs:
  plan:
    name: 1) Plan restore
    runs-on: ubuntu-latest
    outputs:
      restore_needed: ${{ steps.plan.outcome == 'failure' }}
    steps:
      - uses: actions/checkout@v3

      - name: Plan destructive restore (no side-effects)
        id: plan
        continue-on-error: true
        uses: dawidd6/action-ansible-playbook@v4
        with:
          # Required, playbook filepath
          playbook: gitea-deploy.yml
          # Optional, directory where playbooks live
          directory: ./playbooks
          # Optional, ansible configuration file content (ansible.cfg)
#          configuration: |
#            [defaults]
#            callbacks_enabled = ansible.posix.profile_tasks, ansible.posix.timer
#            stdout_callback = yaml
#            nocows = false
          # Optional, SSH private key
          key: ${{secrets.SSH_KEY}}
          # Optional, literal inventory file contents
          inventory: |
            [nas]
            ${{ secrets.NAS_HOST }} ansible_user=${{ NAS_SSH_USER }}
          # Optional, SSH known hosts file content
#            known_hosts: |
#              example.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
          # Optional, encrypted vault password
#            vault_password: ${{secrets.VAULT_PASSWORD}}
          # Optional, galaxy requirements filepath
          requirements: galaxy-requirements.yml
          # Optional, additional flags to pass to ansible-playbook
          options: |
#              --inventory .hosts
            --tags plan-restore
            --extra-vars "restore=${{ inputs.recover }}"
            --verbose

      - name: Show plan result
        if: needs.plan.outputs.restore_needed == 'true'
        run: echo "⚠️ Overlaps detected; manual approval required."

  approve:
    name: 2) Await manual approval
    needs: plan
    if: ${{ needs.plan.outputs.restore_needed == 'true' && inputs.recover == 'true' }}
    runs-on: ubuntu-latest
    environment: production-restore
    steps:
      - run: echo "Waiting for approval to proceed with restore…"

  restore:
    name: 3) Execute restore
    needs: [plan, approve]
    if: ${{ inputs.recover == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Execute destructive restore
        run: |
          ansible-playbook playbooks/gitea-deploy.yml \
            -i "${{ secrets.NAS_HOST }}," \
            --skip-tags plan-restore \
            --extra-vars "restore=true"