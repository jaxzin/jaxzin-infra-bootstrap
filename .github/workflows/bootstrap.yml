# .github/workflows/bootstrap.yml
name: Bootstrap & Disaster-Recovery

on:
  workflow_dispatch:
    inputs:
      recover:
        description: 'Set to true to perform a destructive restore'
        required: true
        default: false
        type: boolean

jobs:
  plan:
    name: 1) Plan restore
    runs-on: self-hosted
    outputs:
      restore_needed: ${{ steps.plan.outcome == 'failure' }}
    steps:
      - uses: actions/checkout@v3

      # The dawidd6/action-ansible-playbook action requires ansible-playbook and
      # ansible-galaxy to be installed and available on the runner's PATH.
      - &ansible_setup
        name: Set up Ansible in a venv
        run: |
          python3 -m venv .venv
          .venv/bin/pip install ansible
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

      - name: Plan destructive restore (no side-effects)
        id: plan
        continue-on-error: true
        uses: dawidd6/action-ansible-playbook@v4
        with:
          playbook: gitea-deploy.yml
          directory: ./playbooks
          key: ${{ secrets.SSH_KEY }}
          inventory: |
            [nas]
            ${{ secrets.NAS_SSH_USER }}@${{ vars.NAS_HOST }}
          requirements: galaxy-requirements.yml
          options: |
            --tags plan-restore
            --extra-vars "restore=${{ inputs.recover }}"

      - name: Show plan result
        if: needs.plan.outputs.restore_needed == 'true'
        run: echo "⚠️ Overlaps detected; manual approval required."

  approve:
    name: 2) Await manual approval
    needs: plan
    if: ${{ needs.plan.outputs.restore_needed == 'true' && inputs.recover == 'true' }}
    runs-on: self-hosted
    environment: production-restore
    steps:
      - run: echo "Waiting for approval to proceed with restore…"

  restore:
    name: 3) Execute restore
    needs: [plan, approve]
    if: ${{ inputs.recover == 'true' }}
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3

      - *ansible_setup

      - name: Execute destructive restore
        uses: dawidd6/action-ansible-playbook@v4
        with:
          playbook: gitea-deploy.yml
          directory: ./playbooks
          key: ${{ secrets.SSH_KEY }}
          inventory: |
            [nas]
            ${{ secrets.NAS_SSH_USER }}@${{ vars.NAS_HOST }}
          requirements: galaxy-requirements.yml
          options: |
            --skip-tags plan-restore
            --extra-vars "restore=true"