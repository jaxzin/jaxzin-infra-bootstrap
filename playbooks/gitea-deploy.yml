# playbooks/gitea-deploy.yml
---
# Ansible playbook to deploy or restore Gitea on my Synology NAS
# - Installs Container Manager (Docker)
# - Deploys MySQL and Gitea containers
# - Plans & gates destructive restore (fail on overlap)
# - Optionally restores from Backblaze B2 backup
# - Syncs SSL certificate
# - Restarts Gitea

- name: Deploy or Restore Gitea on Synology NAS
  hosts: nas
  become: true
  vars:
    dnsimple_oauth_token: "{{ dnsimple_oauth_token }}"
    dnsimple_endpoint: "{{ lookup('env', 'DNSIMPLE_ENDPOINT') | default('https://api.dnsimple.com', true) }}"
    certbot_email: "{{ certbot_email }}"  # Passed from GitHub Actions
    certbot_command_args: [
      "certonly",
      "--dns-dnsimple",
      "-d", "{{ gitea_domain }}",
      "--email", "{{ certbot_email }}",
      "--agree-tos",
      "--no-eff-email",
      "--server", "https://acme-v02.api.letsencrypt.org/directory"
    ]
    # Domain and data paths
    gitea_domain: "nas.lan.jaxzin.com"
    gitea_port: "3000"
    gitea_data_path: "/volume1/docker/gitea"
    certbot_data_path: "/volume1/docker/certbot"
    # Docker images
    gitea_image_tag: "1.24.2-rootless"
    gitea_image: "gitea/gitea:{{ gitea_image_tag }}"
    gitea_db_image: "mysql:8"
    # Database credentials (from environment)
    gitea_db_name: "gitea"
    gitea_db_user: "gitea"
    gitea_db_password: "{{ lookup('env','GITEA_DB_PASSWORD') }}"
    # Backblaze B2 backup settings
    b2_bucket: "{{ lookup('env','B2_ACCESS_KEY') || 'jaxzin-gitea-backups' }}"
    b2_access_key: "{{ lookup('env','B2_ACCESS_KEY') }}"
    b2_secret_key: "{{ lookup('env','B2_SECRET_KEY') }}"
    # SSL/TLS certificate management
    dsm_cert_name: nas-lan
  roles:
    - role: tafeen.synology.syno_pkg_install
      syno_pkg_name: "Container Manager"
      syno_pkg_state: present
      tags: docker
  tasks:
    - name: Install Python3
      include_role:
        name: tafeen.synology.syno_pkg_install
      vars:
        syno_pkg_name: "Python3"
        syno_pkg_state: present

    - name: Install pip
      command: python3 -m ensurepip --upgrade
      args:
        creates: /usr/bin/pip3

    - name: Create data directories for Gitea
      # Prepare persistent directories for both Gitea and MySQL
      file:
        path: "{{ gitea_data_path }}/{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - gitea
        - db
      tags: directories

    - name: Create conf directory for Gitea
      file:
        path: "{{ gitea_data_path }}/conf"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Create Gitea Docker network
      community.docker.docker_network:
        name: gitea-net
        state: present

    - name: Create scripts directory
      file:
        path: "{{ certbot_data_path }}/scripts"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Create shared certs directory
      file:
        path: "{{ certbot_data_path }}/certs"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Create certbot conf directory
      file:
        path: "{{ certbot_data_path }}/conf"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Template dnsimple.ini for certbot
      template:
        src: dnsimple.ini.j2
        dest: "{{ certbot_data_path }}/certs/dnsimple.ini"
        owner: root
        group: root
        mode: '0600'

    - name: Create DNSimple environment file
      copy:
        content: |
          #!/bin/bash
          export DNSIMPLE_OAUTH_TOKEN="{{ dnsimple_oauth_token }}"
          export DNSIMPLE_ENDPOINT="{{ dnsimple_endpoint }}"
        dest: "{{ certbot_data_path }}/dnsimple_env.sh"
        owner: root
        group: root
        mode: '0600'

    - name: Template the renew-cert script
      template:
        src: renew-cert.sh.j2
        dest: "{{ certbot_data_path }}/scripts/renew-cert.sh"
        owner: root
        group: root
        mode: '0755'

    - name: Run initial certificate acquisition
      command: "{{ certbot_data_path }}/scripts/renew-cert.sh"
      args:
        creates: "{{ certbot_data_path }}/certs/live/{{ gitea_domain }}/fullchain.pem"
      environment:
        DNSIMPLE_OAUTH_TOKEN: "{{ dnsimple_oauth_token }}"
        DNSIMPLE_ENDPOINT: "{{ dnsimple_endpoint }}"

    - name: Schedule daily certificate renewal
      ansible.builtin.import_role:
        name: tafeen.synology.syno_crontab
      vars:
        minute: "0"
        hour: "3"
        user: "root"
        job: "{{ certbot_data_path }}/scripts/renew-cert.sh > /dev/null 2>&1"

    - name: Deploy MySQL container for Gitea
      # Launch a MySQL container for the Gitea database
      community.docker.docker_container:
        name: gitea-db
        image: "{{ gitea_db_image }}"
        state: started
        restart_policy: always
        networks:
          - name: gitea-net
        env:
          MYSQL_ROOT_PASSWORD: "{{ gitea_db_password }}"
          MYSQL_DATABASE: "{{ gitea_db_name }}"
          MYSQL_USER: "{{ gitea_db_user }}"
          MYSQL_PASSWORD: "{{ gitea_db_password }}"
        volumes:
          - "{{ gitea_data_path }}/db:/var/lib/mysql"
      tags: db

    - name: Configure Gitea app.ini
      template:
        src: app.ini.j2
        dest: "{{ gitea_data_path }}/conf/app.ini"
        owner: "1000"
        group: "1000"
        mode: '0640'

    - name: Deploy Gitea container
      # Launch the Gitea application container
      community.docker.docker_container:
        name: gitea
        image: "{{ gitea_image }}"
        state: started
        restart_policy: always
        networks:
          - name: gitea-net
        env:
          USER_UID: "1000"
          USER_GID: "1000"
        ports:
          - "3000:3000"
          - "22222:22"
        volumes:
          - "{{ gitea_data_path }}/gitea:/data"
          - "{{ gitea_data_path }}/conf/app.ini:/etc/gitea/app.ini"
          - "{{ gitea_data_path }}/certs:/etc/letsencrypt:ro"
      tags: gitea

    - block:
        - name: Ensure B2 CLI is installed (plan-restore)
          pip:
            name: b2
            state: present

        - name: Download backup tarball for planning
          command: >
            b2 download-file-by-name
            "{{ b2_bucket }}"
            "latest-gitea-backup.tar.gz"
            "/tmp/gitea-backup.tar.gz"
          environment:
            B2_APPLICATION_KEY_ID: "{{ b2_access_key }}"
            B2_APPLICATION_KEY: "{{ b2_secret_key }}"
          args:
            creates: "/tmp/gitea-backup.tar.gz"

        - name: Detect overlaps
          shell: |
            tar -tf /tmp/gitea-backup.tar.gz | while read f; do
              if [ -e "{{ gitea_data_path }}/$f" ]; then
                echo "$f"
              fi
            done
          args:
            executable: /bin/bash
          register: overlaps
          changed_when: false

        - name: Abort on overlaps
          fail:
            msg: |
              Destructive restore would overwrite these files:
              {{ overlaps.stdout_lines | join('\n  - ') }}
      when: restore | default(false) | bool
      tags: plan-restore

    - name: Restore latest backup from Backblaze
      when:
        - restore | default(false) | bool
        - not ansible_check_mode
      block:
        - name: Ensure B2 CLI is installed (restore)
          pip:
            name: b2
            state: present

        - name: Download backup archive
          command: >
            b2 download-file-by-name
            "{{ b2_bucket }}"
            "latest-gitea-backup.tar.gz"
            "/tmp/gitea-backup.tar.gz"
          environment:
            B2_APPLICATION_KEY_ID: "{{ b2_access_key }}"
            B2_APPLICATION_KEY: "{{ b2_secret_key }}"
          args:
            creates: "/tmp/gitea-backup.tar.gz"

        - name: Extract backup
          unarchive:
            src: "/tmp/gitea-backup.tar.gz"
            dest: "{{ gitea_data_path }}"
            remote_src: yes
      tags: restore

    

    - name: Restart Gitea container
      # Restart to pick up new data, configs, or certificates
      community.docker.docker_container:
        name: gitea
        state: restarted
      tags: restart